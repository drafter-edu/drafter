[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "drafter"
version = "1.8.0"
description = "Student-friendly full stack web development library."
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "acbart", email = "acbart@udel.edu"},
]
maintainers = [
    {name = "acbart", email = "acbart@udel.edu"},
]
keywords = [
    "web",
    "education",
    "teaching",
    "framework",
    "student-friendly",
    "web-development",
    "beginner",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Topic :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
dependencies = [
    "bottle>=0.12.0",
    "bakery>=0.2.0",
]

[project.optional-dependencies]
plot = ["matplotlib>=3.0.0"]
images = ["Pillow>=9.0.0"]
dev = [
    "bottle",
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "pytest-splinter>=3.3.0",
    "splinter[selenium]>=0.18.0",
    "WebTest>=3.0.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]
docs = [
    "Sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "cloud-sptheme>=1.10.0",
    "sphinxcontrib-applehelp",
    "sphinxcontrib-devhelp",
    "sphinxcontrib-htmlhelp",
    "sphinxcontrib-jsmath",
    "sphinxcontrib-qthelp",
    "sphinxcontrib-serializinghtml",
    "sphinxcontrib-fulltoc",
    "sphinxjp.themes.basicstrap",
    "sphinxcontrib-mermaid>=0.8.0",
    "sphinx-autobuild>=2021.0.0",
    "sphinx-tabs>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/drafter-edu/drafter"
Documentation = "https://drafter-edu.github.io/drafter/"
Repository = "https://github.com/drafter-edu/drafter"
"Bug Tracker" = "https://github.com/drafter-edu/drafter/issues"
Changelog = "https://github.com/drafter-edu/drafter/blob/main/change_log.md"

[project.scripts]
drafter = "drafter.command_line:main"

[tool.setuptools]
packages = ["drafter"]

[tool.setuptools.package-data]
drafter = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | docsrc/_build
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"tests/*.py" = ["F401", "F811"]  # allow redefinitions in tests

[tool.ruff.isort]
known-first-party = ["drafter"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "bottle.*",
    "pillow.*",
    "bakery.*",
    "matplotlib.*",
    "matplotlib.pyplot.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]

[tool.coverage.run]
source = ["drafter"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]