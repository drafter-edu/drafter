"""
Tests for the HTML output of components using snapshot testing.

This file tests the HTML generated by all PageContent components.
To update snapshots after changing component HTML:
  pytest tests/test_component_html.py --update-snapshots
"""
import os
import json
from pathlib import Path
import pytest
from drafter import (
    Header, BulletedList, NumberedList, Table, Text, 
    Div, Span, Box, Row, Pre,
    LineBreak, HorizontalRule,
    TextBox, TextArea, SelectBox, CheckBox,
    Link, Button, Argument, Image,
    Download, FileUpload
)

# Directory for storing snapshots
SNAPSHOT_DIR = Path(__file__).parent / "snapshots" / "component_html"


def get_snapshot_path(test_name):
    """Get the path to a snapshot file"""
    return SNAPSHOT_DIR / f"{test_name}.html"


def save_snapshot(test_name, html):
    """Save HTML to a snapshot file"""
    SNAPSHOT_DIR.mkdir(parents=True, exist_ok=True)
    snapshot_path = get_snapshot_path(test_name)
    snapshot_path.write_text(html, encoding='utf-8')


def load_snapshot(test_name):
    """Load HTML from a snapshot file"""
    snapshot_path = get_snapshot_path(test_name)
    if not snapshot_path.exists():
        return None
    return snapshot_path.read_text(encoding='utf-8')


def assert_matches_snapshot(test_name, html, request):
    """
    Assert that HTML matches the saved snapshot.
    If --update-snapshots is passed, update the snapshot instead.
    """
    update_snapshots = request.config.getoption("--update-snapshots")
    
    if update_snapshots:
        save_snapshot(test_name, html)
        return
    
    expected = load_snapshot(test_name)
    if expected is None:
        pytest.fail(
            f"No snapshot found for {test_name}. "
            f"Run with --update-snapshots to create it."
        )
    
    assert html == expected, (
        f"HTML does not match snapshot for {test_name}.\n"
        f"Expected:\n{expected}\n\n"
        f"Got:\n{html}\n\n"
        f"Run with --update-snapshots to update the snapshot."
    )


# Tests for basic text components

def test_header_level_1(request):
    """Test Header component with default level"""
    component = Header("Welcome")
    html = str(component)
    assert_matches_snapshot("header_level_1", html, request)


def test_header_level_3(request):
    """Test Header component with custom level"""
    component = Header("Section Title", level=3)
    html = str(component)
    assert_matches_snapshot("header_level_3", html, request)


def test_text_plain(request):
    """Test Text component without styling"""
    component = Text("Hello, World!")
    html = str(component)
    assert_matches_snapshot("text_plain", html, request)


def test_text_with_class(request):
    """Test Text component with class attribute"""
    component = Text("Styled text", **{"class": "highlight"})
    html = str(component)
    assert_matches_snapshot("text_with_class", html, request)


def test_text_with_style(request):
    """Test Text component with inline style"""
    component = Text("Red text", style_color="red")
    html = str(component)
    assert_matches_snapshot("text_with_style", html, request)


# Tests for list components

def test_bulleted_list(request):
    """Test BulletedList component"""
    component = BulletedList(["Apple", "Banana", "Cherry"])
    html = str(component)
    assert_matches_snapshot("bulleted_list", html, request)


def test_numbered_list(request):
    """Test NumberedList component"""
    component = NumberedList(["First", "Second", "Third"])
    html = str(component)
    assert_matches_snapshot("numbered_list", html, request)


def test_list_with_class(request):
    """Test list with class attribute"""
    component = BulletedList(["Item 1", "Item 2"], **{"class": "custom-list"})
    html = str(component)
    assert_matches_snapshot("list_with_class", html, request)


# Tests for container components

def test_div_simple(request):
    """Test Div component with simple content"""
    component = Div("Content inside div")
    html = str(component)
    assert_matches_snapshot("div_simple", html, request)


def test_div_multiple_children(request):
    """Test Div with multiple children"""
    component = Div("First", "Second", "Third")
    html = str(component)
    assert_matches_snapshot("div_multiple_children", html, request)


def test_div_with_id(request):
    """Test Div with id attribute"""
    component = Div("Identified content", id="main-content")
    html = str(component)
    assert_matches_snapshot("div_with_id", html, request)


def test_span_simple(request):
    """Test Span component"""
    component = Span("Inline text")
    html = str(component)
    assert_matches_snapshot("span_simple", html, request)


def test_pre_simple(request):
    """Test Pre component for preformatted text"""
    component = Pre("Code line 1\nCode line 2")
    html = str(component)
    assert_matches_snapshot("pre_simple", html, request)


def test_row_component(request):
    """Test Row component (Div with flex styling)"""
    component = Row("Item 1", "Item 2", "Item 3")
    html = str(component)
    assert_matches_snapshot("row_component", html, request)


# Tests for simple components

def test_line_break(request):
    """Test LineBreak component"""
    component = LineBreak()
    html = str(component)
    assert_matches_snapshot("line_break", html, request)


def test_horizontal_rule(request):
    """Test HorizontalRule component"""
    component = HorizontalRule()
    html = str(component)
    assert_matches_snapshot("horizontal_rule", html, request)


# Tests for table component

def test_table_simple(request):
    """Test Table component without header"""
    component = Table([["A1", "A2"], ["B1", "B2"]])
    html = str(component)
    assert_matches_snapshot("table_simple", html, request)


def test_table_with_header(request):
    """Test Table component with header"""
    component = Table([["Data1", "Data2"], ["Data3", "Data4"]], header=["Col1", "Col2"])
    html = str(component)
    assert_matches_snapshot("table_with_header", html, request)


def test_table_with_class(request):
    """Test Table with class attribute"""
    component = Table([["X", "Y"]], **{"class": "data-table"})
    html = str(component)
    assert_matches_snapshot("table_with_class", html, request)


# Tests for form components

def test_textbox_simple(request):
    """Test TextBox component"""
    component = TextBox("username")
    html = str(component)
    assert_matches_snapshot("textbox_simple", html, request)


def test_textbox_with_default(request):
    """Test TextBox with default value"""
    component = TextBox("email", default_value="user@example.com")
    html = str(component)
    assert_matches_snapshot("textbox_with_default", html, request)


def test_textbox_with_placeholder(request):
    """Test TextBox with placeholder"""
    component = TextBox("search", placeholder="Search...")
    html = str(component)
    assert_matches_snapshot("textbox_with_placeholder", html, request)


def test_textarea_simple(request):
    """Test TextArea component"""
    component = TextArea("comment")
    html = str(component)
    assert_matches_snapshot("textarea_simple", html, request)


def test_textarea_with_default(request):
    """Test TextArea with default text"""
    component = TextArea("description", default_value="Default text here")
    html = str(component)
    assert_matches_snapshot("textarea_with_default", html, request)


def test_textarea_with_rows_cols(request):
    """Test TextArea with rows and cols"""
    component = TextArea("bigtext", rows=10, cols=50)
    html = str(component)
    assert_matches_snapshot("textarea_with_rows_cols", html, request)


def test_selectbox_simple(request):
    """Test SelectBox component"""
    component = SelectBox("color", ["Red", "Green", "Blue"])
    html = str(component)
    assert_matches_snapshot("selectbox_simple", html, request)


def test_selectbox_with_default(request):
    """Test SelectBox with default selection"""
    component = SelectBox("size", ["Small", "Medium", "Large"], default_value="Medium")
    html = str(component)
    assert_matches_snapshot("selectbox_with_default", html, request)


def test_checkbox_unchecked(request):
    """Test CheckBox component unchecked"""
    component = CheckBox("agree")
    html = str(component)
    assert_matches_snapshot("checkbox_unchecked", html, request)


def test_checkbox_checked(request):
    """Test CheckBox component checked"""
    component = CheckBox("subscribe", default_value=True)
    html = str(component)
    assert_matches_snapshot("checkbox_checked", html, request)


# Tests for argument component

def test_argument_simple(request):
    """Test Argument component"""
    component = Argument("user_id", 123)
    html = str(component)
    assert_matches_snapshot("argument_simple", html, request)


def test_argument_string_value(request):
    """Test Argument with string value"""
    component = Argument("token", "abc123")
    html = str(component)
    assert_matches_snapshot("argument_string_value", html, request)


# Tests for nested components

def test_nested_div_with_header(request):
    """Test nested components - Div containing Header"""
    component = Div(Header("Title", level=2), Text("Some text"))
    html = str(component)
    assert_matches_snapshot("nested_div_with_header", html, request)


def test_nested_div_with_list(request):
    """Test nested components - Div containing list"""
    component = Div(
        Header("My List", level=3),
        BulletedList(["Item A", "Item B", "Item C"])
    )
    html = str(component)
    assert_matches_snapshot("nested_div_with_list", html, request)


def test_complex_nested_structure(request):
    """Test complex nested structure"""
    component = Div(
        Header("Dashboard", level=1),
        Div(
            Header("Section 1", level=2),
            Text("Description text"),
            BulletedList(["Point 1", "Point 2"])
        ),
        HorizontalRule(),
        Div(
            Header("Section 2", level=2),
            Table([["A", "B"], ["C", "D"]], header=["Col1", "Col2"])
        )
    )
    html = str(component)
    assert_matches_snapshot("complex_nested_structure", html, request)


# Tests for components with attributes

def test_div_with_multiple_attributes(request):
    """Test Div with multiple HTML attributes"""
    component = Div("Content", id="main", **{"class": "container", "data-value": "123"})
    html = str(component)
    assert_matches_snapshot("div_with_multiple_attributes", html, request)


def test_text_with_multiple_styles(request):
    """Test Text with multiple style properties"""
    component = Text("Styled", style_color="blue", style_font_size="20px", style_font_weight="bold")
    html = str(component)
    assert_matches_snapshot("text_with_multiple_styles", html, request)


# Tests for Link and Button components (which have dynamic IDs)

def test_link_simple(request):
    """Test Link component - note that links include instance IDs"""
    component = Link("Click Here", "/page")
    html = str(component)
    # Links contain dynamic instance IDs, so we'll just check structure
    assert "<a href=" in html
    assert "Click Here" in html


def test_button_simple(request):
    """Test Button component - note that buttons include instance IDs"""
    component = Button("Submit", "/submit")
    html = str(component)
    # Buttons contain dynamic instance IDs, so we'll just check structure
    assert "<button" in html
    assert "Submit" in html
    assert "type='submit'" in html


# Tests for image component

def test_image_with_url(request):
    """Test Image component with URL"""
    component = Image("test.png")
    html = str(component)
    # Just verify the basic structure since paths can vary
    assert "<img src=" in html
    assert "test.png" in html


# Tests for download component

def test_download_component(request):
    """Test Download component"""
    component = Download("Download File", "data.txt", "File contents here")
    html = str(component)
    assert "<a" in html
    assert "download" in html
    assert "Download File" in html


# Tests for file upload component

def test_file_upload_component(request):
    """Test FileUpload component"""
    component = FileUpload("document")
    html = str(component)
    assert_matches_snapshot("file_upload_component", html, request)
