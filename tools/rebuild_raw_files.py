import argparse
import base64
import gzip
import os
import json
from pathlib import Path


if __name__ == "__main__":
    drafter_root_directory = Path(__file__).parent.parent
    default_manifest_path = drafter_root_directory / "libs" / "manifest.json"
    default_output_path = drafter_root_directory / "drafter" / "raw_files.py"

    parser = argparse.ArgumentParser(description="Rebuild raw files")
    parser.add_argument("--manifest", help="Path to the JSON manifest file",
                        default=default_manifest_path)
    parser.add_argument("--output", help="Path to the output file",
                        default=default_output_path)
    args = parser.parse_args()

    manifest_path = Path(args.manifest)
    if not manifest_path.exists():
        raise FileNotFoundError(f"Manifest file not found: {manifest_path}")

    with open(manifest_path) as f:
        manifest = json.load(f)

    RAW_FILES = {}
    for theme, categories in manifest.items():
        if theme not in RAW_FILES:
            RAW_FILES[theme] = {}
        RAW_FILES[theme]['metadata'] = categories.pop('metadata', {})
        for category, filenames in categories.items():
            if category not in RAW_FILES[theme]:
                RAW_FILES[theme][category] = {}
            for filename in filenames:
                source_path = drafter_root_directory / "libs" / filename
                with open(source_path, "r") as f:
                    raw = f.read()
                RAW_FILES[theme][category][filename] = raw

    output_path = Path(args.output)
    if not output_path.parent.exists():
        raise FileNotFoundError(f"Output file not already found: {output_path}")

    raw_file_count = 0
    with open(output_path, "w") as f:
        f.write("# This file is generated by rebuild_raw_files.py\n")
        f.write("from base64 import b64decode\n")
        f.write("from dataclasses import dataclass\n")
        f.write("import gzip\n\n")
        f.write("""
@dataclass
class RawFiles:
    metadata: dict
    scripts: dict
    styles: dict
    deploy: dict

""")
        f.write("RAW_FILES = {}\n")
        for theme, categories in RAW_FILES.items():
            metadata = categories.pop('metadata', {})
            f.write(f"RAW_FILES['{theme}'] = RawFiles({json.dumps(metadata)}, {{}}, {{}}, {{}})\n")

            for category, files in categories.items():
                for filename, raw in files.items():
                    #converted = base64.b64encode(gzip.compress(raw.encode())).decode("utf-8")
                    f.write(f"RAW_FILES['{theme}'].{category}['{filename}'] = {json.dumps(raw)}\n")
                    raw_file_count += 1

        f.write("\n")
        f.write("""

def extract(text):
    return gzip.decompress(b64decode(text)).decode()    
    
CACHED_DECOMPRESSED = {}
def get_raw_files(theme):
    if theme in CACHED_DECOMPRESSED:
        return CACHED_DECOMPRESSED[theme]
    if theme not in RAW_FILES:
        return None
    return RawFiles(
        RAW_FILES[theme].metadata,
        {k: f"<script>{v}</script>" for k, v in RAW_FILES[theme].scripts.items()},
        {k: f"<style>{v}</style>" for k, v in RAW_FILES[theme].styles.items()},
        {k: f"<script>{v}</script>" for k, v in RAW_FILES[theme].deploy.items()},
    )

def get_themes():
    return list(RAW_FILES.keys())
    """)

    print(f"{raw_file_count} raw files written to {output_path}")